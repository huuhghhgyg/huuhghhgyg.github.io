<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Feature on Hikaru&#39;s Blog</title>
    <link>http://localhost:1313/tags/feature/</link>
    <description>Recent content in Feature on Hikaru&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 21 Jul 2024 14:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/feature/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>启用新主题</title>
      <link>http://localhost:1313/posts/new-theme/</link>
      <pubDate>Sun, 21 Jul 2024 14:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/new-theme/</guid>
      <description>&lt;h1 id=&#34;缘由&#34;&gt;缘由&lt;/h1&gt;&#xA;&lt;p&gt;旧主题来源于 2017 年的&lt;a href=&#34;https://github.com/iblh/hexo-theme-material&#34;&gt;hexo-theme-material&lt;/a&gt;，但是作者很早已经停止维护。后来我自己修改了一些样式，虽然观感有点提升，但是还是有很多问题，比如我一直没有找到一个很好的文字排版显示样式，代码高亮、数学公式显示等等都多少有点问题。而且之前的网站维护经验不足，添加了一堆有的没的 CDN 外链，不知道什么时候就会失效，维护起来有点费力。所以我决定换一个新的主题，降低维护难度，把需要的资源和链接全部迁移到 GitHub Page 和 Cloudflare 上，顺便尝试一下 Hugo。&lt;/p&gt;&#xA;&lt;h2 id=&#34;旧主题样式&#34;&gt;旧主题样式&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;old-theme-1.webp&#34; alt=&#34;旧主题-主页&#34;&gt;&#xA;&lt;img src=&#34;old-theme-2.webp&#34; alt=&#34;旧主题-banner&#34;&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;其实旧主题整体上还是很好看的，但是加载上也是莫名其妙有点慢&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;新主题样式&#34;&gt;新主题样式&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;new-theme.webp&#34; alt=&#34;新主题-主页&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;换的另一个原因是在 Hugo theme 上逛了一圈好不容易看中了一个主题，&lt;a href=&#34;https://github.com/fauzanmy/pehtheme-hugo&#34;&gt;pehtheme-hugo&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;过程&#34;&gt;过程&lt;/h1&gt;&#xA;&lt;p&gt;hexo 换成 hugo 还是有一些区别，比如帖子格式得重新设置，图片存放位置等都要做相应调整，全部放到文章对应的文件夹下面等。费了一点力气，好在不多，顺便也删除了一些没有什么作用的历史文章，留下的要么感觉比较实用，要么留作纪念。&lt;/p&gt;&#xA;&lt;p&gt;换这个主题也是花费了一些时间的，主要是在我手上压了一段时间。一方面是最近比较忙，另一方面是时间主要花在调整主题功能上面了。用惯了 VuePress 后感觉这个主题功能缺失有点多，比如目录、评论、搜索、数学公式显示这些都没有，感觉比较塑料。&lt;/p&gt;&#xA;&lt;p&gt;但是这个主题的优点是简洁好看，和其他人的主题看上去也不太一样（比如经典的 Hexo Next 系列及其衍生主题，以及屏幕樱花乱飘、点击还会跳出来彩色字的那种），而且还是 Material Design 3 的设计，所以还是没有办法，选择了这个（我之前爆改 Hexo 主题也是因为有的地方看着不合适）。&lt;/p&gt;&#xA;&lt;p&gt;在迁移的过程中非常感谢自己之前抽空学了 Git 和 PowerShell 的一些基本操作，省下了很多“体力劳动”耗费的时间，如通过命令行批量将文件设置为指定格式，逐步记录对于新主题的修改。说明&lt;a href=&#34;https://missing-semester-cn.github.io/&#34;&gt;《计算机教育中缺失的一课》&lt;/a&gt;还是非常实用的（可以把 PowerShell 看成 Bash）。还有以前自己学的 TailwindCSS 在快速修改了主题的一些样式上也起到了一些作用，不过其实大多都还要归功于 ChatGPT，它确实是一个很好的帮手（工具人）。&lt;/p&gt;&#xA;&lt;p&gt;当然现在有的功能还是没来得及添加，比如评论，也不知道以后加不加，看情况吧。&lt;/p&gt;&#xA;&lt;h1 id=&#34;规划&#34;&gt;规划&lt;/h1&gt;&#xA;&lt;p&gt;其实最近不是很想动 Blog 这边了，感觉时间也不是很多，可以看到我 2022 年左右就已经断更了。一是感觉没有什么很特别的东西可以共享出来，一些碎碎念都放到伊龙马的平台上了；二是这段时间虽然也有在写，但是主要都放上 Obsidian 上面变成了自己的知识库，大多是课程笔记之类的东西（比如 6.0001、6.0002 之类的学习笔记），虽然比较实用，但是和网上太多重复感觉再放上来也没什么意义。&lt;/p&gt;&#xA;&lt;p&gt;不过具体也再看吧，也许以后有的 Obsidian 内容会想着放上来，作为某种知识的整理。&lt;/p&gt;</description>
    </item>
    <item>
      <title>利用Gitkraken了解Git</title>
      <link>http://localhost:1313/posts/git-basic/</link>
      <pubDate>Fri, 09 Jul 2021 20:56:37 +0000</pubDate>
      <guid>http://localhost:1313/posts/git-basic/</guid>
      <description>&lt;p&gt;git是版本控制系统。应用最为广泛，适用于中小项目。本身是命令行工具。&#xA;GitKraken图形化客户端，界面漂亮，功能全面。&lt;/p&gt;&#xA;&lt;p&gt;🔗链接&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.gitkraken.com/&#34;&gt;GitKraken&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;git的基本概念和操作&#34;&gt;Git的基本概念和操作&lt;/h1&gt;&#xA;&lt;h2 id=&#34;代码仓库repository&#34;&gt;代码仓库(Repository)&lt;/h2&gt;&#xA;&lt;p&gt;创建一个&lt;strong&gt;代码仓库(Repository)&lt;/strong&gt;，可以是本地仓库，也可以是保存在远程服务器上的仓库。仓库之间可以相互同步。&#xA;&lt;img src=&#34;1.png&#34; alt=&#34;&#34;&gt;&#xA;显示代码的所有提交历史，其中每项代表一个&lt;strong&gt;提交(Commit)&lt;/strong&gt;,提交相当于检查点或者快照。对代码作出修改后可以提交这次修改，Git会保存当前的代码快照，之后可以轻松回溯到这里。&#xA;新建代码仓库的时候会自动创建一个提交。&#xA;选中提交后可以看到所有修改的文件。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;GitKraken 中打开git目录可以点击“文件”-“在文件浏览器中打开”，找到代码仓库在本地计算机上存放的位置&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;作出更改后文件历史中多出 &lt;code&gt;//WIP&lt;/code&gt; (Work In Progress)，代表这个提交正在施工中。&#xA;Git要求在提交修改的文件前要对它们先 &lt;strong&gt;Stage&lt;/strong&gt;，点击Stage。Stage可看作提交前防止误操作。其中必填本次提交的描述。最后&amp;quot;Commit&amp;quot;完成提交，这里的提交还是在本地计算机的提交。&#xA;如果要远程提交到代码仓库，就需要 &lt;strong&gt;&amp;ldquo;Push&amp;quot;s&lt;/strong&gt;，推送提交即可。&lt;/p&gt;&#xA;&lt;h2 id=&#34;拉取pull&#34;&gt;拉取(Pull)&lt;/h2&gt;&#xA;&lt;p&gt;从远程服务器 &lt;strong&gt;拉取(Pull)&lt;/strong&gt; 提交&#xA;&lt;img src=&#34;2.png&#34; alt=&#34;&#34;&gt;&#xA;提交历史会多出来一条。master和电脑图标的标签表示本地仓库的提交，上面的表示Github上的远程仓库提交（master是分支）。(origin通常代表远程仓库)。如果想把远程提交同步到本地仓库只需要点击**&amp;ldquo;Pull&amp;rdquo;**。点击后两个图标重合在一起，代表远程仓库和本地仓库的提交历史已经完全相同。&lt;/p&gt;&#xA;&lt;h2 id=&#34;合并merge&#34;&gt;合并(Merge)&lt;/h2&gt;&#xA;&lt;p&gt;两边同时作出了修改后提交历史会产生分叉&#xA;&lt;img src=&#34;3.png&#34; alt=&#34;&#34;&gt;&#xA;如果想要将两个修改同时应用在本地仓库中，需要合并。Pull的时候会自动合并远程提交到本地的提交中。Pull后Git会自动生成一个新提交。&#xA;&lt;img src=&#34;4.png&#34; alt=&#34;&#34;&gt;&#xA;如果同时修改代码的同一处位置，再次Pull的时候，会自动合并失败，需要手动合并冲突(Conflict)的部分。&#xA;&lt;img src=&#34;5.png&#34; alt=&#34;&#34;&gt;&#xA;&lt;img src=&#34;6.png&#34; alt=&#34;&#34;&gt;&#xA;下面的窗口用于手动解决冲突&#xA;&lt;img src=&#34;7.png&#34; alt=&#34;&#34;&gt;&#xA;最终完成提交&#xA;&lt;img src=&#34;8.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;提交改写amend&#34;&gt;提交改写(Amend)&lt;/h2&gt;&#xA;&lt;p&gt;用于提交代码有误或者提交信息出错，对已提交的文件和信息进行修改。在提交前勾选Amend后正常提交。这个操作只会修改已经存在的提交。但是最好本地使用。&lt;/p&gt;&#xA;&lt;h2 id=&#34;分支branch&#34;&gt;分支(Branch)&lt;/h2&gt;&#xA;&lt;p&gt;创建一个新分支，点击Branch按钮。创建好后分支的提交历史和原来相同，但是往后的提交会相互独立。默认只会推送master分支到远程服务器，如果要推送其他分支，点右键然后选择Push。&lt;/p&gt;&#xA;&lt;h2 id=&#34;合并分支merge-branches&#34;&gt;合并分支（Merge Branches）&lt;/h2&gt;&#xA;&lt;p&gt;将test合并到master上，先双击切换到master分支，在test分支上右键点“合并test分支到master分支”。（可能需要手动解决代码冲突）&lt;/p&gt;&#xA;&lt;h2 id=&#34;暂存stash&#34;&gt;暂存(Stash)&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;9.png&#34; alt=&#34;&#34;&gt;&#xA;暂存当前的修改，源代码会被还原到之前的状态，可以进行其他操作。&#xA;&lt;img src=&#34;10.png&#34; alt=&#34;&#34;&gt;&#xA;最后可以通过Pop将暂存的代码恢复出来，甚至可以切换到很老的版本将暂存的修改恢复出来。&lt;/p&gt;&#xA;&lt;h2 id=&#34;变基rebase&#34;&gt;变基(Rebase)&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;11.png&#34; alt=&#34;&#34;&gt;&#xA;在合并分支的过程中，会将整个分支摘取下来，嫁接到另一个分支上（改变了原有的基底）。相比Merge,Merge的优点在于原先的提交历史会被完整地保留下来。&#xA;比如将test分支变基到master分支，先选择test分支，右键选择“将test分支变基到master分支上”，完成操作。最后将master分支指向最新的提交，这样master分支的内容才是最新的。（用到Fast Forward)&lt;/p&gt;&#xA;&lt;h2 id=&#34;快进fast-forward&#34;&gt;快进(Fast Forward)&lt;/h2&gt;&#xA;&lt;p&gt;直接让master的指针快进到test分支。&lt;/p&gt;&#xA;&lt;h2 id=&#34;签出checkout&#34;&gt;签出(Checkout)&lt;/h2&gt;&#xA;&lt;p&gt;回退到早期的版本完成一些bug的修复。在想要回到的节点上右键点击签出，此时Head标签指向当前提交。&#xA;&lt;img src=&#34;12.png&#34; alt=&#34;&#34;&gt;&#xA;修改完后提交是基于早期的提交,最后可以将其变基到当前的提交上，变基完成后提交会变成一条直线。&lt;/p&gt;&#xA;&lt;h2 id=&#34;撤销操作undoing&#34;&gt;撤销操作(Undoing)&lt;/h2&gt;&#xA;&lt;p&gt;常用于在Git中错误提交了代码或者错误合并了一个分支。得益于每次的操作都记录在Reflog的类似日志的文件里，能够帮你轻松回退之前的状态。GitKraken中就是状态栏中的undo操作。包括分支切换、合并、修改甚至删除等等。&lt;/p&gt;&#xA;&lt;h2 id=&#34;恢复revert&#34;&gt;恢复(Revert)&lt;/h2&gt;&#xA;&lt;p&gt;常用于撤销已提交的代码（远程）。在GitKraken中在提交上点右键，Git会创建一个完全相反的提交以恢复。&lt;/p&gt;&#xA;&lt;h1 id=&#34;图形化界面对应的命令行命令&#34;&gt;图形化界面对应的命令行命令&lt;/h1&gt;&#xA;&lt;h2 id=&#34;第一部分常用基础部分&#34;&gt;第一部分（常用基础部分）&lt;/h2&gt;&#xA;&lt;p&gt;配置基本用户信息&#xA;&lt;code&gt;git config --global user.name &amp;lt;用户名&amp;gt;&lt;/code&gt;&#xA;&lt;code&gt;git config --global user.email &amp;lt;邮箱地址&amp;gt;&lt;/code&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>

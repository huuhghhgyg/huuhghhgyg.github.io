<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>前端 on Hikaru&#39;s Blog</title>
    <link>https://www.zhhuu.top/tags/%E5%89%8D%E7%AB%AF/</link>
    <description>Recent content in 前端 on Hikaru&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 21 Jul 2024 14:00:00 +0000</lastBuildDate>
    <atom:link href="https://www.zhhuu.top/tags/%E5%89%8D%E7%AB%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>启用新主题</title>
      <link>https://www.zhhuu.top/posts/new-theme/</link>
      <pubDate>Sun, 21 Jul 2024 14:00:00 +0000</pubDate>
      <guid>https://www.zhhuu.top/posts/new-theme/</guid>
      <description>缘由 旧主题来源于 2017 年的hexo-theme-material，但是作者很早已经停止维护。后来我自己修改了一些样式，虽然观感有点提升，但是还是有很多问题，比如我一直没有找到一个很好的文字排版显示样式，代码高亮、数学公式显示等等都多少有点问题。而且之前的网站维护经验不足，添加了一堆有的没的 CDN 外链，不知道什么时候就会失效，维护起来有点费力。所以我决定换一个新的主题，降低维护难度，把需要的资源和链接全部迁移到 GitHub Page 和 Cloudflare 上，顺便尝试一下 Hugo。&#xA;旧主题样式 其实旧主题整体上还是很好看的，但是加载上也是莫名其妙有点慢&#xA;新主题样式 换的另一个原因是在 Hugo theme 上逛了一圈好不容易看中了一个主题，pehtheme-hugo&#xA;过程 hexo 换成 hugo 还是有一些区别，比如帖子格式得重新设置，图片存放位置等都要做相应调整，全部放到文章对应的文件夹下面等。费了一点力气，好在不多，顺便也删除了一些没有什么作用的历史文章，留下的要么感觉比较实用，要么留作纪念。&#xA;换这个主题也是花费了一些时间的，主要是在我手上压了一段时间。一方面是最近比较忙，另一方面是时间主要花在调整主题功能上面了。用惯了 VuePress 后感觉这个主题功能缺失有点多，比如目录、评论、搜索、数学公式显示这些都没有，感觉比较塑料。&#xA;但是这个主题的优点是简洁好看，和其他人的主题看上去也不太一样（比如经典的 Hexo Next 系列及其衍生主题，以及屏幕樱花乱飘、点击还会跳出来彩色字的那种），而且还是 Material Design 3 的设计，所以还是没有办法，选择了这个（我之前爆改 Hexo 主题也是因为有的地方看着不合适）。&#xA;在迁移的过程中非常感谢自己之前抽空学了 Git 和 PowerShell 的一些基本操作，省下了很多“体力劳动”耗费的时间，如通过命令行批量将文件设置为指定格式，逐步记录对于新主题的修改。说明《计算机教育中缺失的一课》还是非常实用的（可以把 PowerShell 看成 Bash）。还有以前自己学的 TailwindCSS 在快速修改了主题的一些样式上也起到了一些作用，不过其实大多都还要归功于 ChatGPT，它确实是一个很好的帮手（工具人）。&#xA;当然现在有的功能还是没来得及添加，比如评论，也不知道以后加不加，看情况吧。&#xA;规划 其实最近不是很想动 Blog 这边了，感觉时间也不是很多，可以看到我 2022 年左右就已经断更了。一是感觉没有什么很特别的东西可以共享出来，一些碎碎念都放到伊龙马的平台上了；二是这段时间虽然也有在写，但是主要都放上 Obsidian 上面变成了自己的知识库，大多是课程笔记之类的东西（比如 6.0001、6.0002 之类的学习笔记），虽然比较实用，但是和网上太多重复感觉再放上来也没什么意义。&#xA;不过具体也再看吧，也许以后有的 Obsidian 内容会想着放上来，作为某种知识的整理。</description>
    </item>
    <item>
      <title>VSCode多光标输入</title>
      <link>https://www.zhhuu.top/posts/vscode-multicursor/</link>
      <pubDate>Sun, 11 Jul 2021 15:00:42 +0000</pubDate>
      <guid>https://www.zhhuu.top/posts/vscode-multicursor/</guid>
      <description>VSCode多行光标功能的使用&#xA;参考 Visual Studio Code Basics: This topic takes you through the basics of the editor and helps you get moving with your code StackOverflow: Multiline editing in Visual Studio Code 多行光标的使用 用键盘使用多行光标 快捷键 作用 Ctrl+D 选择下一个匹配的内容 Ctrl+U 撤销上一个光标操作 Esc 取消多行选择 Ctrl+Backspace 智能删除 使用 Ctrl+D 时,右上角的小部件，从左到右依次是： 区分大小写 Alt+C、全字匹配 Alt+W、使用正则表达式 Alt+R&#xA;Ctrl+Shift+P 能够呼出万能指令窗口&#xA;Ctrl+Shift+P 指令 作用 Cursor Undo 撤销光标操作 Cursor Redo 重做光标操作 用鼠标使用多行光标 有时候可能会想要跳过某一个位置，这时使用Ctrl+D就难以做到。使用鼠标控制会令多行光标的使用更灵活。（比如说跳过注释部分的“：”）&#xA;使用方法 按住 Alt 并点击&#xA;多行光标特性 合并 当两个光标移动到重合时，会自动合并。例如下面的删除： 有时候在一行中分布有很多光标，当用 Ctrl+← 将光标置于行开头的时候，也会因此自动合并。 这个特性可以在VSCode选项中关闭，默认开启。</description>
    </item>
    <item>
      <title>npm快速上手</title>
      <link>https://www.zhhuu.top/posts/npm-overview/</link>
      <pubDate>Sat, 10 Jul 2021 19:13:03 +0000</pubDate>
      <guid>https://www.zhhuu.top/posts/npm-overview/</guid>
      <description>在npm中，包（package）、模块（module）、依赖（dependency）都是一个东西。&#xA;npm常用操作 npm配置项 初始化 npm init（其实就是创建一个package.json文件），之后让你填入许多信息（package name, version, description, entry point, test command, git repository, key words, author) npm init -y相当于npm init但信息都为空，初始化后npm会认为你的项目是一个包&#xA;npm搜索 npm search &amp;lt;包名&amp;gt; 如：npm search jquery&#xA;包安装 操作 命令 直接安装 npm install &amp;lt;包名&amp;gt;，简写为npm i &amp;lt;包名&amp;gt; 安装指定版本/旧版本 npm install &amp;lt;包名&amp;gt;@&amp;lt;版本号&amp;gt; 安装指定tag的包 npm install &amp;lt;包名&amp;gt;@&amp;lt;tag&amp;gt; 参数 -g 安装到全局环境下，这样在任何一个目录下都能识别，比如 npm install npm@latest -g 参数 --save-dev或者-D 表明是开发环境下的依赖，不会在生产环境中出现 包卸载 npm uninstall &amp;lt;包名&amp;gt; -D 卸载包，并从package.json的devDependencies中删除。 老版本的npm中卸载包要加--save才能保存到package.json中&#xA;常用操作 操作 命令 更新包 npm update &amp;lt;包名&amp;gt;，局部更新。加-g全局更新 列出已安装包 npm list默认列出局部依赖。加-g 列出已安装的全局依赖。 检查过期包（依赖） npm outdated 查看依赖安装路径 npm root，也就是node_modules的路径，加-g查看全局安装路径 查看模块的注册信息 npm view &amp;lt;包名&amp;gt; versions，列出所有版本。</description>
    </item>
    <item>
      <title>利用Gitkraken了解Git</title>
      <link>https://www.zhhuu.top/posts/git-basic/</link>
      <pubDate>Fri, 09 Jul 2021 20:56:37 +0000</pubDate>
      <guid>https://www.zhhuu.top/posts/git-basic/</guid>
      <description>git是版本控制系统。应用最为广泛，适用于中小项目。本身是命令行工具。 GitKraken图形化客户端，界面漂亮，功能全面。&#xA;🔗链接&#xA;GitKraken Git的基本概念和操作 代码仓库(Repository) 创建一个代码仓库(Repository)，可以是本地仓库，也可以是保存在远程服务器上的仓库。仓库之间可以相互同步。 显示代码的所有提交历史，其中每项代表一个提交(Commit),提交相当于检查点或者快照。对代码作出修改后可以提交这次修改，Git会保存当前的代码快照，之后可以轻松回溯到这里。 新建代码仓库的时候会自动创建一个提交。 选中提交后可以看到所有修改的文件。&#xA;GitKraken 中打开git目录可以点击“文件”-“在文件浏览器中打开”，找到代码仓库在本地计算机上存放的位置&#xA;作出更改后文件历史中多出 //WIP (Work In Progress)，代表这个提交正在施工中。 Git要求在提交修改的文件前要对它们先 Stage，点击Stage。Stage可看作提交前防止误操作。其中必填本次提交的描述。最后&amp;quot;Commit&amp;quot;完成提交，这里的提交还是在本地计算机的提交。 如果要远程提交到代码仓库，就需要 &amp;ldquo;Push&amp;quot;s，推送提交即可。&#xA;拉取(Pull) 从远程服务器 拉取(Pull) 提交 提交历史会多出来一条。master和电脑图标的标签表示本地仓库的提交，上面的表示Github上的远程仓库提交（master是分支）。(origin通常代表远程仓库)。如果想把远程提交同步到本地仓库只需要点击**&amp;ldquo;Pull&amp;rdquo;**。点击后两个图标重合在一起，代表远程仓库和本地仓库的提交历史已经完全相同。&#xA;合并(Merge) 两边同时作出了修改后提交历史会产生分叉 如果想要将两个修改同时应用在本地仓库中，需要合并。Pull的时候会自动合并远程提交到本地的提交中。Pull后Git会自动生成一个新提交。 如果同时修改代码的同一处位置，再次Pull的时候，会自动合并失败，需要手动合并冲突(Conflict)的部分。 下面的窗口用于手动解决冲突 最终完成提交 提交改写(Amend) 用于提交代码有误或者提交信息出错，对已提交的文件和信息进行修改。在提交前勾选Amend后正常提交。这个操作只会修改已经存在的提交。但是最好本地使用。&#xA;分支(Branch) 创建一个新分支，点击Branch按钮。创建好后分支的提交历史和原来相同，但是往后的提交会相互独立。默认只会推送master分支到远程服务器，如果要推送其他分支，点右键然后选择Push。&#xA;合并分支（Merge Branches） 将test合并到master上，先双击切换到master分支，在test分支上右键点“合并test分支到master分支”。（可能需要手动解决代码冲突）&#xA;暂存(Stash) 暂存当前的修改，源代码会被还原到之前的状态，可以进行其他操作。 最后可以通过Pop将暂存的代码恢复出来，甚至可以切换到很老的版本将暂存的修改恢复出来。&#xA;变基(Rebase) 在合并分支的过程中，会将整个分支摘取下来，嫁接到另一个分支上（改变了原有的基底）。相比Merge,Merge的优点在于原先的提交历史会被完整地保留下来。 比如将test分支变基到master分支，先选择test分支，右键选择“将test分支变基到master分支上”，完成操作。最后将master分支指向最新的提交，这样master分支的内容才是最新的。（用到Fast Forward)&#xA;快进(Fast Forward) 直接让master的指针快进到test分支。&#xA;签出(Checkout) 回退到早期的版本完成一些bug的修复。在想要回到的节点上右键点击签出，此时Head标签指向当前提交。 修改完后提交是基于早期的提交,最后可以将其变基到当前的提交上，变基完成后提交会变成一条直线。&#xA;撤销操作(Undoing) 常用于在Git中错误提交了代码或者错误合并了一个分支。得益于每次的操作都记录在Reflog的类似日志的文件里，能够帮你轻松回退之前的状态。GitKraken中就是状态栏中的undo操作。包括分支切换、合并、修改甚至删除等等。&#xA;恢复(Revert) 常用于撤销已提交的代码（远程）。在GitKraken中在提交上点右键，Git会创建一个完全相反的提交以恢复。&#xA;图形化界面对应的命令行命令 第一部分（常用基础部分） 配置基本用户信息 git config --global user.name &amp;lt;用户名&amp;gt; git config --global user.email &amp;lt;邮箱地址&amp;gt;&#xA;创建一个新仓库 git init</description>
    </item>
    <item>
      <title>为本站添加A2HS</title>
      <link>https://www.zhhuu.top/posts/a2hs/</link>
      <pubDate>Sat, 27 Jul 2019 15:45:10 +0000</pubDate>
      <guid>https://www.zhhuu.top/posts/a2hs/</guid>
      <description>终究止不住折腾，终于还是把卡住很久的这个功能做出来了。&#xA;🔗参考链接&#xA;Mozilla A2HS Mozilla A2HS demo Google A2HS | App install banners Google A2HS | Web app manifest manifest的设置 一开始的时候瞎瞄两眼介绍，就天真地以为只要manifest.json或者manifest.webmanifest这个文件存在就好了，结果后来慢慢了解发现还有事呢..反正让它跑起来再说&amp;hellip;&#xA;不管怎么说，先把manifest.webmanifest写好 (当然你写manifest.json也是可以的，只不过时改了一下后缀名而已，内容相同，看哪个顺眼就用哪个) 那既然要这个文件，就先找最简单的抄了一个，内容如下(来自Mozilla A2HS demo)&#xA;1{ 2 &amp;#34;background_color&amp;#34;: &amp;#34;purple&amp;#34;, 3 &amp;#34;description&amp;#34;: &amp;#34;Shows random fox pictures. Hey, at least it isn&amp;#39;t cats.&amp;#34;, 4 &amp;#34;display&amp;#34;: &amp;#34;fullscreen&amp;#34;, 5 &amp;#34;icons&amp;#34;: [ 6 { 7 &amp;#34;src&amp;#34;: &amp;#34;icon/fox-icon.png&amp;#34;, 8 &amp;#34;sizes&amp;#34;: &amp;#34;192x192&amp;#34;, 9 &amp;#34;type&amp;#34;: &amp;#34;image/png&amp;#34; 10 } 11 ], 12 &amp;#34;name&amp;#34;: &amp;#34;Awesome fox pictures&amp;#34;, 13 &amp;#34;short_name&amp;#34;: &amp;#34;Foxes&amp;#34;, 14 &amp;#34;start_url&amp;#34;: &amp;#34;/pwa-examples/a2hs/index.</description>
    </item>
    <item>
      <title>如何唤醒在硬盘中的hexo</title>
      <link>https://www.zhhuu.top/posts/wakeup-hexo/</link>
      <pubDate>Mon, 28 Aug 2017 23:05:40 +0000</pubDate>
      <guid>https://www.zhhuu.top/posts/wakeup-hexo/</guid>
      <description>昨天重新灌了电脑的系统，发现 hexo 不能用了&#xA;安装基本软件 Git Node.js 注意：必须使用 Node v12.14.0 旧版 Hexo 才不会报错&#xA;注:Node.js(中文网站)没有使用 https，原因是使用后可能导致无法打开此网页&#xA;步骤 假使 hexo 目录为 D:/hexo&#xA;打开 CMD [按下**(win+r)**组合键，输入 cmd] 输入 npm:如果没有 npm 的详细信息，请重装 Node.js CMD 中定位到 hexo 目录 1d: 2cd hexo 安装 hexo:在 CMD 中输入npm install -g hexo 安装完成后关闭 CMD 打开 Git，定位到 hexo 的目录cd d:/hexo 可以使用啦! 密钥问题 打开 Github，转到你的设置 找到SSH and GPG keys，添加新的密钥&#xA;1git config --global user.name &amp;#34;用户名&amp;#34; 2git config --global user.email &amp;#34;邮箱&amp;#34; 3 4ssh-keygen -t rsa -C &amp;#34;邮箱&amp;#34; 你的 windows 账户文件夹内，会有.</description>
    </item>
    <item>
      <title>Hexo书写语法</title>
      <link>https://www.zhhuu.top/posts/hexo-grammer/</link>
      <pubDate>Tue, 08 Aug 2017 09:30:38 +0000</pubDate>
      <guid>https://www.zhhuu.top/posts/hexo-grammer/</guid>
      <description>介绍如何用Markdown语法在hexo上写文章，发现自己对这类东西还不是很熟悉233&amp;hellip;&#xA;Markdown语法 粗体 样式 **样式**&#xA;斜体 样式 *样式*&#xA;删除线 样式 ~~样式~~&#xA;分割线 样式&#xA;细线:--- 粗线:***&#xA;外链 样式 [描述](链接地址) 代码行 样式 `样式`&#xA;##代码块&#xA;1@Echo off 2Echo &amp;#34;Hello World!&amp;#34; 3Pause ``` @Echo off Echo &amp;ldquo;Hello World!&amp;rdquo; Pause ```&#xA;引用 样式&#xA;&amp;gt; 样式&#xA;插入图片 ![描述](图片链接地址)&#xA;分级标题 1H1 : # Header 1 2H2 : ## Header 2 3H3 : ### Header 3 4H4 : #### Header 4 5H5 : ##### Header 5 6H6 : ###### Header 6 我是一级标题 我是二级标题 1我是一级标题 2==== 3 4 5我是二级标题 6---- 无序列表 可以用+或-或*</description>
    </item>
  </channel>
</rss>

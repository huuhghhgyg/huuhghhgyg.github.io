<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Hikaru&#39;s Blog</title>
    <link>https://www.zhhuu.top/tags/python/</link>
    <description>Recent content in Python on Hikaru&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 13 Jul 2022 12:07:30 +0000</lastBuildDate>
    <atom:link href="https://www.zhhuu.top/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用Python编写遗传算法</title>
      <link>https://www.zhhuu.top/posts/ga/</link>
      <pubDate>Wed, 13 Jul 2022 12:07:30 +0000</pubDate>
      <guid>https://www.zhhuu.top/posts/ga/</guid>
      <description>算法设计，附源码&#xA;概述 当涉及非线性规划问题或者难以在短时间内求得满意解的线性规划问题，可以通过求其近似解（或满意解）而非精确解。使用遗传算法求解近似解所消耗的时间远少于求解精确解，多数时候近似解的效果都可以接受。 遗传算法的优势体现在：在小规模问题上，遗传算法求解得到的通常是精确解；而在大规模问题上，遗传算法通常可以通过较短的时间求得精确解。 同样的问题通过遗传算法求解近似解和线性规划求解精确解，遗传算法花费的时间显著短于精确算法。&#xA;算法 时长 结果(此处结果越小越好） 遗传算法 123s (2m03s) 371.06 精确算法 201s (3m21s) 367.07 模型描述 目标函数 $minf=P\sum_{k=1}^K\sum_{i=1}^N\sum_{j=1}^Nx_{kij}d_{ij}+\frac{P_a}{Q}\sum_{i=1}^N\sum_{j=1}^N(y_{ij}+z_{ij})x_{kij}d_{ij}+P_m\sum_{k=1}^K\sum_{i=1}^N\sum_{j=M}^Nx_{kij}q_j$&#xA;约束方程 $$ s.t.\left\{ \begin{array}{**lr**} \sum_{k=1}^K\sum_{i=1}^Nx_{kij}=1 &amp; j=2,3,...,N \\ \sum_{j=1}^Nx_{kij} = \sum_{j=1}^Nx_{kij} &amp; i=1,2,...,N;k=1,2,...,K \\ \sum_{j=1}^Nx_{k1j} \le 1 &amp; k=1,2,...,K \\ y_{ij}+z_{ij} \le Q\sum_{k=1}^Kx_{kij} &amp; i,j=2,3,...,N \\ \sum_{i=1}^N\sum_{j=1}^Nx_{kij}d_{ij} \leq D &amp; k=1,2,...,K \\ \sum_{j=1}^Nz_{ij}-\sum_{j=1}^Nz_{ij}=p_i &amp; i=2,3,...,N \\ \sum_{i=1}^Nx_{kii}=0 &amp; j=1,2,...,N \\ \sum_{i=2}^N\sum_{j=1}^Nx_{kij} \le V &amp; k=1,2,...,K \\ y_{ij} \ge 0 ,z_{ij} \ge 0 &amp; i,j=1,2,.</description>
    </item>
    <item>
      <title>PythonNote1</title>
      <link>https://www.zhhuu.top/posts/python-note-1/</link>
      <pubDate>Thu, 08 Oct 2020 09:25:58 +0000</pubDate>
      <guid>https://www.zhhuu.top/posts/python-note-1/</guid>
      <description>删除对象 类似C#中的 =null&#xA;1var1 = 1 2var2 = 10 3 4del var1,var2 #关闭 5 6print(var1) 字符串截取 字符串的截取的语法格式： &amp;lsquo;变量[头下标:尾下标:步长]&amp;rsquo; 头下标从0开始，尾下标从-1开始 某一下标后的所有内容 &amp;lsquo;str[1:]&amp;rsquo;&#xA;列表同理，将str替换为list&#xA;都是闭区间&#xA;步长:间距截取，默认间隔为1，为-1时表示逆向读取 join() str.join() 方法用于将序列中的元素以指定的字符(str)连接生成一个新的字符串。 list → string&#xA;split() split() 通过指定分隔符(str)对字符串进行切片形成列表&#xA;数据类型 Number（数字） String（字符串） List（列表） []：元素可以修改 Tuple（元组）()：元素不可修改，也可以用+进行拼接 1tup1 = () # 空元组 2tup2 = (20,) # 一个元素，需要在元素后添加逗号 Set（集合）{}: 可以进行集合运算 1a = set(&amp;#39;abracadabra&amp;#39;) 2b = set(&amp;#39;alacazam&amp;#39;) 3 4print(a - b) # a 和 b 的差集 5print(a | b) # a 和 b 的并集 6print(a &amp;amp; b) # a 和 b 的交集 7print(a ^ b) # a 和 b 中不同时存在的元素 创建空集合set() Dictionary（字典）{a:b}:内容写法与集合不同 1dict = {} 2dict[&amp;#39;one&amp;#39;] = &amp;#34;1 - 菜鸟教程&amp;#34; 3dict[2] = &amp;#34;2 - 菜鸟工具&amp;#34; 4 5tinydict = {&amp;#39;name&amp;#39;: &amp;#39;runoob&amp;#39;,&amp;#39;code&amp;#39;:1, &amp;#39;site&amp;#39;: &amp;#39;www.</description>
    </item>
  </channel>
</rss>
